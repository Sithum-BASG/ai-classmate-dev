rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    function signedIn() { return request.auth != null; }
    function uid() { return request.auth.uid; }
    function role() { return request.auth.token.role; }
    function isAdmin() { return role() == 'admin'; }
    function isTutor() { return role() == 'tutor'; }
    function isStudent() { return role() == 'student'; }
    function tutorApproved() { return request.auth.token.tutorApproved == true; }
    function tutorProfileApproved(u) {
      return get(/databases/$(db)/documents/tutor_profiles/$(u)).data.status == 'approved';
    }
    function isSelf(targetUserId) { return signedIn() && uid() == targetUserId; }

    function getClass(classId) {
      return get(/databases/$(db)/documents/classes/$(classId));
    }
    function classIsPublished(classId) {
      return getClass(classId).data.status == 'published';
    }
    function getEnrollment(enrollmentId) {
      return get(/databases/$(db)/documents/enrollments/$(enrollmentId));
    }

    // USERS: users/{userId}
    match /users/{userId} {
      allow read: if isAdmin() || isSelf(userId);
      allow create: if isSelf(userId);
      // Owners may update non-privileged fields only (role/status immutable by owner)
      allow update: if isSelf(userId)
                    && request.resource.data.role == resource.data.role
                    && request.resource.data.status == resource.data.status
                    || isAdmin();
      allow delete: if isAdmin();
    }

    // STUDENT PROFILE: student_profiles/{userId}
    match /student_profiles/{userId} {
      allow read: if isAdmin()
                  || isSelf(userId)
                  || (isTutor() && (resource.data.authorizedTutors[uid()] == true));
      allow create, update: if isAdmin() || isSelf(userId);
      allow delete: if isAdmin();
    }

    // TUTOR PROFILE: tutor_profiles/{userId}
    // Public can read approved tutor profiles; tutors/admins can read their own.
    match /tutor_profiles/{userId} {
      allow read: if isAdmin() || isSelf(userId) || (resource.data.status == 'approved');
      allow create: if isSelf(userId);
      // Tutors can update own profile except review/status fields; admins can update all
      allow update: if isAdmin()
                    || (
                      isSelf(userId)
                      && !request.resource.data.diff(resource.data)
                            .changedKeys()
                            .hasAny(['reviewed_by', 'reviewed_at', 'status'])
                    )
                    || (
                      // Allow self reapply: only change status from rejected -> pending
                      isSelf(userId)
                      && request.resource.data.diff(resource.data).changedKeys().size() == 1
                      && request.resource.data.diff(resource.data).changedKeys().hasAny(['status'])
                      && resource.data.status == 'rejected'
                      && request.resource.data.status == 'pending'
                      && request.resource.data.reviewed_by == resource.data.reviewed_by
                      && request.resource.data.reviewed_at == resource.data.reviewed_at
                    );
      allow delete: if isAdmin();
    }

    // TUTOR RATINGS: tutor_profiles/{tutorId}/ratings/{ratingId}
    // Students can create/update one rating per enrollment for a tutor.
    // ratingId should be the enrollmentId to enforce uniqueness per enrollment.
    match /tutor_profiles/{tutorId}/ratings/{ratingId} {
      // Ratings are public for transparency
      allow read: if true;

      // Create allowed by the enrollment owner (ratingId == enrollmentId) for the correct tutor
      allow create: if signedIn()
                    && (request.resource.data.rating is number)
                    && request.resource.data.rating >= 1
                    && request.resource.data.rating <= 5
                    && getEnrollment(ratingId).exists()
                    && getEnrollment(ratingId).data.studentId == uid()
                    && getClass(getEnrollment(ratingId).data.classId).data.tutorId == tutorId;

      // Allow updates by the same enrollment owner for the same tutor
      allow update: if signedIn()
                    && getEnrollment(ratingId).exists()
                    && getEnrollment(ratingId).data.studentId == uid()
                    && getClass(getEnrollment(ratingId).data.classId).data.tutorId == tutorId;

      // Deletion not allowed from client for auditability
      allow delete: if false;
    }

    // CLASSES: classes/{classId}
    // Students can read published; tutors can read their own; admins can read all
    // Only admins (or server via Admin SDK) may publish/modify status
    match /classes/{classId} {
      allow read: if isAdmin()
                  || resource.data.status == 'published'
                  || (signedIn() && resource.data.tutorId == uid());
      // Allow approved tutors (by profile) to create their own class drafts
      allow create: if signedIn() && tutorProfileApproved(uid());
      // Tutors can update their own classes while approved, but not change status
      allow update: if (signedIn() && resource.data.tutorId == uid()
                        && tutorProfileApproved(uid())
                        && request.resource.data.status == resource.data.status)
                        || isAdmin();
      allow delete: if isAdmin();

      // Class sessions as subcollection: classes/{classId}/sessions/{sessionId}
      match /sessions/{sessionId} {
        allow read: if isAdmin()
                    || classIsPublished(classId)
                    || (signedIn() && getClass(classId).data.tutorId == uid());
        allow create, update, delete: if isAdmin()
                                      || (signedIn() && tutorProfileApproved(uid()) && getClass(classId).data.tutorId == uid());
      }

      // Class announcements subcollection
      match /announcements/{announcementId} {
        allow read: if isAdmin()
                    || classIsPublished(classId)
                    || (signedIn() && getClass(classId).data.tutorId == uid());
        // Allow the class owner tutor to manage announcements regardless of role claims
        allow create, update, delete: if isAdmin()
                                      || (signedIn() && getClass(classId).data.tutorId == uid());
      }

      // Class materials metadata subcollection (for Storage files)
      match /materials/{materialId} {
        // Tutors (owner) or public if class is published
        allow read: if isAdmin()
                    || classIsPublished(classId)
                    || (signedIn() && getClass(classId).data.tutorId == uid());
        // Owner tutor can create/update/delete without relying on custom claims
        allow create, update, delete: if isAdmin()
                                      || (signedIn() && getClass(classId).data.tutorId == uid());
      }
    }

    // ENROLLMENTS: enrollments/{enrollmentId}
    // Read: owner student or admin or tutor of the class
    match /enrollments/{enrollmentId} {
      allow read: if isAdmin()
                  || (signedIn() && resource.data.studentId == uid())
                  || (signedIn() && getClass(resource.data.classId).data.tutorId == uid());
      // Clients should not create/confirm enrollments directly (use Cloud Functions)
      allow create, update, delete: if false;
    }

    // INVOICES: invoices/{invoiceId}
    match /invoices/{invoiceId} {
      allow read: if isAdmin()
                  || (signedIn() && resource.data.studentId == uid())
                  || (
                    isTutor() &&
                    getEnrollment(resource.data.enrollmentId).exists() &&
                    getClass(getEnrollment(resource.data.enrollmentId).data.classId).data.tutorId == uid()
                  );
      allow create, update, delete: if false; // Managed by Functions
    }

    // PAYMENTS: payments/{paymentId}
    // Students can create 'submitted' payments for their own invoice; status changes only by admin
    match /payments/{paymentId} {
      allow read: if isAdmin() || (signedIn() && resource.data.studentId == uid());
      allow create: if signedIn()
                    && request.resource.data.studentId == uid()
                    && request.resource.data.status == 'submitted';
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // GLOBAL ANNOUNCEMENTS: announcements/{id}
    match /announcements/{id} {
      allow read: if true; // public
      allow create, update, delete: if isAdmin();
    }

    // MESSAGES per-user: users/{userId}/messages/{messageId}
    match /users/{userId}/messages/{messageId} {
      allow read: if isSelf(userId) || isAdmin();
      allow create: if isSelf(userId) || isAdmin();
      allow update, delete: if isSelf(userId) || isAdmin();
    }

    // NOTIFICATIONS per-user: users/{userId}/notifications/{notificationId}
    match /users/{userId}/notifications/{notificationId} {
      allow read: if isSelf(userId) || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

